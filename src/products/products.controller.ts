import {
  Controller,
  Get,
  Post,
  Param,
  Body,
  Delete,
  NotFoundException,
  ParseIntPipe,
  Query,
} from '@nestjs/common';
import { ProductsService } from './products.service';
import { CreateProductDto } from './dto/create-product.dto';
import { ApiTags, ApiOperation, ApiParam, ApiQuery, ApiResponse } from '@nestjs/swagger';

@ApiTags('Products') // Swagger bo‚Äòlim nomi
@Controller('products')
export class ProductsController {
  constructor(private readonly productsService: ProductsService) {}

  // üîç Barcha mahsulotlarni olish
  @Get()
  @ApiOperation({ summary: 'Barcha mahsulotlarni olish', description: 'Kategoriyaga ko‚Äòra filterlash mumkin' })
  @ApiQuery({ name: 'category', required: false, description: 'Kategoriya nomi' })
  @ApiResponse({ status: 200, description: 'Mahsulotlar ro‚Äòyxati qaytariladi' })
  findAll(@Query('category') category?: string) {
    return this.productsService.findAll(category);
  }

  // üîç Bitta mahsulotni ID orqali olish
  @Get(':id')
  @ApiOperation({ summary: 'Bitta mahsulotni olish', description: 'Mahsulot ID bo‚Äòyicha topiladi' })
  @ApiParam({ name: 'id', type: Number, description: 'Mahsulot ID' })
  @ApiResponse({ status: 200, description: 'Topilgan mahsulot ma‚Äôlumotlari' })
  @ApiResponse({ status: 404, description: 'Mahsulot topilmadi' })
  async findOne(@Param('id', ParseIntPipe) id: number) {
    const product = await this.productsService.findOne(id);
    if (!product) {
      throw new NotFoundException(`Mahsulot ID ${id} topilmadi`);
    }
    return product;
  }

  // üîÅ Bog ªliq mahsulotlarni olish
  @Get(':id/related')
  @ApiOperation({ summary: 'Bog ªliq mahsulotlarni olish', description: 'O‚Äòxshash mahsulotlarni qaytaradi' })
  @ApiParam({ name: 'id', type: Number, description: 'Mahsulot ID' })
  @ApiResponse({ status: 200, description: 'Bog ªliq mahsulotlar ro‚Äòyxati' })
  findRelated(@Param('id', ParseIntPipe) id: number) {
    return this.productsService.findRelated(id);
  }

  // ‚ûï Yangi mahsulot qo‚Äòshish
  @Post()
  @ApiOperation({ summary: 'Yangi mahsulot qo‚Äòshish' })
  @ApiResponse({ status: 201, description: 'Mahsulot muvaffaqiyatli yaratildi' })
  create(@Body() dto: CreateProductDto) {
    return this.productsService.create(dto);
  }

  // ‚ùå Mahsulotni o‚Äòchirish
  @Delete(':id')
  @ApiOperation({ summary: 'Mahsulotni o‚Äòchirish' })
  @ApiParam({ name: 'id', type: Number, description: 'Mahsulot ID' })
  @ApiResponse({ status: 200, description: 'Mahsulot muvaffaqiyatli o‚Äòchirildi' })
  remove(@Param('id', ParseIntPipe) id: number) {
    return this.productsService.remove(id);
  }
}
